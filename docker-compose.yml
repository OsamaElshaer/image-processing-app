services:
    nginx:
        image: nginx:latest
        container_name: nginx-gateway
        ports:
            - "80:80"
        volumes:
            - processed_images:/var/www/processed
            - ./services/nginx-gateway/nginx.conf:/etc/nginx/nginx.conf:ro
        depends_on:
            - user-service
            - upload-image-service
            - notification-service
            - process-image-service
        networks:
            - app-network

    elasticsearch:
        image: docker.elastic.co/elasticsearch/elasticsearch:8.5.1
        container_name: elasticsearch
        environment:
            - discovery.type=single-node
            - bootstrap.memory_lock=true
            - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
            - xpack.security.enabled=false

        ulimits:
            memlock:
                soft: -1
                hard: -1
        ports:
            - "9200:9200"
        volumes:
            - elasticsearch_data:/usr/share/elasticsearch/data
        networks:
            - elk_network

    kibana:
        image: docker.elastic.co/kibana/kibana:8.5.1
        container_name: kibana
        depends_on:
            - elasticsearch
        ports:
            - "5601:5601"
        networks:
            - elk_network

    logstash:
        image: docker.elastic.co/logstash/logstash:8.5.1
        container_name: logstash
        volumes:
            - ./logstash/pipeline:/usr/share/logstash/pipeline
            - user_logs:/app/user-service/logs
            - notification_logs:/app/notification-service/logs
            - upload_image_logs:/app/upload-image-service/logs
            - process_image_logs:/app/process-image-service/logs
        environment:
            - "LS_JAVA_OPTS=-Xms256m -Xmx256m"
        ports:
            - "5044:5044" # For receiving logs
            - "9600:9600" # Monitoring API
        depends_on:
            - elasticsearch
        networks:
            - elk_network
            - app-network

    jaeger:
        image: jaegertracing/all-in-one:latest
        container_name: jaeger
        ports:
            - "16686:16686"
            - "14268:14268"
        networks:
            - app-network

    user-service:
        build:
            context: services/user-service
        container_name: user-service
        restart: always
        image: user-service
        volumes:
            - ./services/user-service/src:/app/user-service/src:ro
            - user_logs:/app/user-service/logs
        depends_on:
            postgres:
                condition: service_healthy
            rabbitmq:
                condition: service_healthy
        networks:
            - app-network

    notification-service:
        build:
            context: services/notification-service
        container_name: notification-service
        restart: always
        image: notification-service
        volumes:
            - ./services/notification-service/src:/app/notification-service/src:ro
            - notification_logs:/app/notification-service/logs
        depends_on:
            postgres:
                condition: service_healthy
            rabbitmq:
                condition: service_healthy
        networks:
            - app-network

    upload-image-service:
        build:
            context: ./services/upload-image-service
        container_name: upload-image-service
        image: upload-image-service
        restart: always
        volumes:
            - ./services/upload-image-service/src:/app/upload-image-service/src:ro
            - upload_image_logs:/app/upload-image-service/logs
        depends_on:
            postgres:
                condition: service_healthy
            rabbitmq:
                condition: service_healthy
        networks:
            - app-network

    process-image-service:
        build:
            context: ./services/process-image-service
        container_name: process-image-service
        image: process-image-service
        restart: on-failure
        volumes:
            - ./services/process-image-service/src:/app/process-image-service/src:ro
            - processed_images:/app/process-image-service/output
            - process_image_logs:/app/process-image-service/logs
        depends_on:
            postgres:
                condition: service_healthy
            rabbitmq:
                condition: service_healthy
            upload-image-service:
                condition: service_started
        networks:
            - app-network

    rabbitmq:
        image: rabbitmq:management
        container_name: rabbitmq
        restart: always
        ports:
            - "5672:5672"
            - "15672:15672"
        environment:
            RABBITMQ_DEFAULT_USER: guest
            RABBITMQ_DEFAULT_PASS: guest
        volumes:
            - rabbitmq_data:/var/lib/rabbitmq
        healthcheck:
            test: ["CMD-SHELL", "rabbitmq-diagnostics -q ping"]
            interval: 30s
            timeout: 10s
            retries: 5
        networks:
            - app-network

    postgres:
        image: postgres
        container_name: postgres-container
        ports:
            - "5432:5432"
        restart: always
        environment:
            POSTGRES_USER: root
            POSTGRES_PASSWORD: postgres
        volumes:
            - pgdata:/var/lib/postgresql/data
        healthcheck:
            test: ["CMD-SHELL", "pg_isready -U root"]
            interval: 10s
            timeout: 5s
            retries: 5
        networks:
            - app-network

    redis:
        image: redis
        container_name: redis
        ports:
            - "6379:6379"
        networks:
            - app-network

volumes:
    pgdata:
    rabbitmq_data:
    processed_images:

    user_logs:
    notification_logs:
    upload_image_logs:
    process_image_logs:

    elasticsearch_data:
        driver: local

networks:
    elk_network:
    app-network:
        driver: bridge
